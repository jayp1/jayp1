{"version":3,"sources":["images/Screenshot_weather_app.png","components/Layout/Header/Header.js","components/Layout/Footer/Footer.js","components/Layout/Main/Projects/Project/Project.js","components/Layout/Main/Projects/Projects.js","components/Layout/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","className","href","IconButton","aria-label","style","color","onClick","window","open","Project","src","WeatherAppPic","alt","target","Projects","id","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oD,kQCG5B,G,kBAAA,SAAAC,GAAK,OAClB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,QACb,wBAAIA,UAAU,SAAd,wBAEF,yBAAKA,UAAU,SACb,4BACE,4BAAI,uBAAGC,KAAK,YAAR,UACJ,4BAAI,uBAAGA,KAAK,WAAR,WACJ,4BAAI,uBAAGA,KAAK,aAAR,aACJ,4BAAI,uBAAGA,KAAK,YAAR,iB,mECNC,WAAAF,GAAK,OAClB,4BAAQC,UAAU,UAEhB,yBAAKA,UAAU,OACb,kBAACE,EAAA,EAAD,CAAYC,aAAW,eAAeC,MAAO,CAAEC,MAAO,SAAWC,QAAS,kBAAMC,OAAOC,KAAK,qDAC1F,kBAAC,IAAD,OAEF,kBAACN,EAAA,EAAD,CAAYC,aAAW,gBAAgBC,MAAO,CAAEC,MAAO,SAAWC,QAAS,kBAAMC,OAAOC,KAAK,wCAC3F,kBAAC,IAAD,OAEF,kBAACN,EAAA,EAAD,CAAYC,aAAW,aAAaC,MAAO,CAAEC,MAAO,SAAWC,QAAS,kBAAMC,OAAOC,KAAK,+BACxF,kBAAC,IAAD,QAKJ,yBAAKR,UAAU,UACb,4BAAK,iC,yBCrBES,G,MAAU,SAACV,GACpB,OACI,yBAAKC,UAAU,gBACP,yBAAKA,UAAU,iBACX,yBAAKU,IAAKX,EAAMY,cAAeC,IAAI,mCAGvC,yBAAKZ,UAAU,uBACX,4CACA,4JAGJ,yBAAKA,UAAU,kBACX,uBAAGC,KAAK,IAAIY,OAAO,UAAnB,kBCJPC,G,MAAW,WACpB,OACI,6BAASd,UAAU,YACf,kBAAC,EAAD,CAASW,cAAeA,MACxB,kBAAC,EAAD,CAASA,cAAeA,MACxB,kBAAC,EAAD,CAASA,cAAeA,SCZrB,WAAAZ,GAAK,OAClB,0BAAMC,UAAU,QACd,yBAAKe,GAAG,WACJ,gDACA,uFAgBJ,kBAAC,EAAD,QCPWC,MAZf,WACE,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYiB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8323fc6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Screenshot_weather_app.258a45e1.png\";","import React from \"react\";\nimport './Header.css';\n\nexport default props => (\n  <nav className=\"navbar\">\n      <div className=\"left\">\n        <h2 className=\"Title\">Jarryd Palzenberger</h2>\n      </div>\n      <div className=\"right\">\n        <ul>\n          <li><a href=\"#Summary\">About</a></li>\n          <li><a href=\"#Skills\">Skills</a></li>\n          <li><a href=\"#Projects\">Projects</a></li>\n          <li><a href=\"#Contact\">Contact</a></li>\n         </ul>\n      </div>\n    </nav>\n);","import React from \"react\";\nimport './Footer.css';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport IconButton from '@material-ui/core/IconButton';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nexport default props => (\n  <footer className=\"Footer\">\n    \n    <div className=\"top\">\n      <IconButton aria-label=\"Linkedin.com\" style={{ color: 'white' }} onClick={() => window.open('https://www.linkedin.com/in/jarrydpalzenberger/')}>\n        <LinkedInIcon />\n      </IconButton>\n      <IconButton aria-label=\"Instagram.com\" style={{ color: 'white' }} onClick={() => window.open('https://www.instagram.com/jpalzen/')}>\n        <InstagramIcon />\n      </IconButton>\n      <IconButton aria-label=\"Github.com\" style={{ color: 'white' }} onClick={() => window.open('https://github.com/jayp1/')}>\n        <GitHubIcon />\n      </IconButton>\n\n\n    </div>\n    <div className=\"bottom\">\n      <h5>{'Copyright Â© PALZEN 2021' }</h5>\n    </div>\n  </footer>\n);","import React from 'react';\nimport './Project.css';\n\nexport const Project = (props) => {\n    return (\n        <div className=\"Project-card\">\n                <div className=\"Project-image\">\n                    <img src={props.WeatherAppPic} alt=\"Screenshot of Weather Web app\"></img>\n\n                </div>\n                <div className=\"Project-description\">\n                    <h2> Weather App</h2>\n                    <p>Hosted on Google Firebase and developed with React, this app allows you to determine weather forecasts for worldwide cities.</p>\n\n                </div>\n                <div className=\"Project-action\">\n                    <a href=\"#\" target='_blank'>To Website</a>\n                </div>\n\n            </div>\n\n    );\n} ","import React from 'react';\nimport WeatherAppPic from '../../../../images/Screenshot_weather_app.png';\nimport { Project } from './Project/Project';\nimport './Projects.css';\n\n\n/*\n    Displayed card per project completed.\n     - Link to website\n     - Explain technologies used.\n*/\n\nexport const Projects = () => {\n    return (\n        <section className=\"Projects\">\n            <Project WeatherAppPic={WeatherAppPic}/>\n            <Project WeatherAppPic={WeatherAppPic}/>\n            <Project WeatherAppPic={WeatherAppPic}/>\n            \n\n\n\n        </section>\n    );\n}","import React from 'react';\n/*import { Grid, Paper } from '@material-ui/core';*/\nimport './Main.css';\nimport { Projects } from './Projects/Projects';\n\nexport default props => (\n  <main className=\"Main\">\n    <div id=\"Summary\">\n        <h1>Hi, I am Jarryd.</h1>\n        <p>I build awesome web experiences with modern technology.</p>\n    </div>\n{/*\n    <Grid container>\n      <Grid item xs sm>\n        <Paper elevation={3} style={styles.Paper}>\n          Left Pane\n        </Paper>\n      </Grid>\n      <Grid item xs sm>\n        <Paper elevation={3} style={styles.Paper}>\n          Right Pane\n            </Paper>\n      </Grid>\n    </Grid>\n*/}\n    <Projects />\n\n\n  </main>\n\n);","import React from 'react';\nimport './App.css';\nimport { Header, Footer, Main } from './components/Layout/index';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='Content'>\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}