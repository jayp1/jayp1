{"version":3,"sources":["components/location/location.js","components/forecast/forecast.js","containers/weather/weather.js","App.js","serviceWorker.js","index.js"],"names":["Location","state","city","handleChange","event","setState","target","value","className","onSubmit","props","clicked","onChange","this","type","placeholder","aria-label","error","style","color","React","Component","forecast","country","windSpeed","humidity","tempInDegrees","weatherImageSrc","weekDay","precip","descrip","d","Date","thisMonth","getMonth","thisWeekday","getDay","weekday2","weekday3","weekday4","thisYear","getFullYear","thisMonthDay","getDate","Math","round","list","main","temp","weather","icon","name","description","wind","speed","mm","rain","src","alt","Weather","currentWeather","location","componentDidMount","getDeviceLocation","getForecastFromCity","axios","get","UNIT","API_KEY","then","response","data","catch","navigator","geolocation","console","log","getCurrentPosition","position","getCoordsForecast","coords","latitude","longitude","setLocation","Number","parseFloat","toFixed","handleCitySearch","preventDefault","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ba5d542b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './location.css';\r\nclass Location extends React.Component {\r\n    \r\n    state = {\r\n        city: null,\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({city:event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Location\">\r\n                <form className=\"form-inline my-2 my-lg-0\" onSubmit={(event)=>this.props.clicked(event,this.state.city)}>\r\n                    <input className=\"form-control mr-sm-2\" onChange={this.handleChange} type=\"text\" placeholder=\"Search for a city\" aria-label=\"Search\" />\r\n                    <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                </form>\r\n                {this.props.error ? <p style={{color:\"red\"}}>{this.props.error}</p>: <p></p>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Location;","import React from 'react';\r\nimport './forecast.css';\r\n\r\nconst forecast = props => {\r\n\r\n    let tempInDegrees = '';\r\n    let weatherImageSrc = null;\r\n    let city;\r\n    let country;\r\n    let weekDay = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    let windSpeed;\r\n    let humidity;\r\n    let precip = 0;\r\n    let descrip = null;\r\n    const d = new Date();\r\n    const thisMonth = months[d.getMonth()];\r\n    const thisWeekday = weekDay[d.getDay()];\r\n    const weekday2 = weekDay[d.getDay() + 1];\r\n    const weekday3 = weekDay[d.getDay() + 2];\r\n    const weekday4 = weekDay[d.getDay() + 3];\r\n    const thisYear = d.getFullYear();\r\n    const thisMonthDay = d.getDate();\r\n\r\n    if (props.forecast) {\r\n        //const num = props.forecast.main.temp - 273.15;\r\n        //tempInDegrees = Math.round((num + Number.EPSILON) * 100) / 100\r\n        tempInDegrees = Math.round(props.forecast.list[0].main.temp);\r\n        weatherImageSrc = \"http://openweathermap.org/img/wn/\" + props.forecast.list[0].weather[0].icon + '@2x.png';\r\n        city = props.forecast.city.name;\r\n        country = props.forecast.city.country;\r\n        descrip = props.forecast.list[0].weather[0].description;\r\n\r\n        windSpeed = props.forecast.list[0].wind.speed;\r\n        humidity = props.forecast.list[0].main.humidity;\r\n        for (let mm = 1; mm < 8; mm++) {\r\n            if (props.forecast.list[mm].rain) {\r\n                precip += props.forecast.list[mm].rain['3h'];\r\n            }\r\n\r\n        }\r\n\r\n        precip = Math.round(precip, 2);\r\n\r\n\r\n    } else {\r\n        // Spinner\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"Forecast\">\r\n            <div className=\"card text-center\">\r\n                <div className=\"card-header\">\r\n                    <h3>{city ?  city+', ' +country :'Enter City'}</h3>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h6>{thisWeekday}, {thisMonthDay} {thisMonth} {thisYear}</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"Icon\">\r\n                                {weatherImageSrc ? <img src={weatherImageSrc} alt=\"Weather Icon\" />: null}\r\n                                \r\n                            </div>\r\n                            <div className=\"Temperature\">{tempInDegrees ? <span className=\"TempNum\">{tempInDegrees}&deg;</span>: null} - {descrip}</div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"Stats row\">\r\n                        <div className=\"wind col-4\">\r\n                            <div>Wind Speed</div>\r\n                            <div>{windSpeed} m/s</div>\r\n\r\n                        </div>\r\n                        <div className=\"humid col-4\">\r\n                            <div>Humidity</div>\r\n                            <div>{humidity}%</div>\r\n                        </div>\r\n                        <div className=\"precip col-4\">\r\n                            <div>Precipitation (24h)</div>\r\n                            <div>{precip ? precip : '0'}mm</div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <div className=\"future container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                            <div className=\"FutureDays\">\r\n                                {weekday2}\r\n                            </div>\r\n                            <div className=\"FutureTemps\">\r\n                                {props.forecast ? Math.round(props.forecast.list[8].main.temp) : 'N/A'} &#8451;\r\n                        </div>\r\n\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <div className=\"FutureDays\">\r\n                                {weekday3}\r\n                            </div>\r\n                            <div className=\"FutureTemps\">\r\n                                {props.forecast ? Math.round(props.forecast.list[16].main.temp) : 'N/A'} &#8451;\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <div className=\"FutureDays\">\r\n                                {weekday4}\r\n                            </div>\r\n                            <div className=\"FutureTemps\">\r\n                                {props.forecast ? Math.round(props.forecast.list[24].main.temp) : 'N/A'} &#8451;\r\n                        </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default forecast;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Location from '../../components/location/location';\r\nimport Forecast from '../../components/forecast/forecast';\r\nimport './weather.css';\r\n\r\nclass Weather extends React.Component {\r\n\r\n    state = {\r\n        currentWeather: null,\r\n        location: null,\r\n        forecast: null,\r\n        city: null,\r\n        error: null,\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getDeviceLocation();\r\n        //this.getForecastFromCity();\r\n    }\r\n    getForecastFromCity = (city) => {\r\n\r\n        axios.get('http://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=' + UNIT + '&appid=' + API_KEY)\r\n            .then(response => {\r\n                this.setState({\r\n                    currentWeather: response.data,\r\n                    error: null,\r\n                });\r\n            }).catch(error => {\r\n                this.setState({ error: \"Error : Invalid City\" })\r\n            });\r\n\r\n        axios.get('http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&units=' + UNIT + '&appid=' + API_KEY)\r\n            .then(response => {\r\n                this.setState({\r\n                    forecast: response.data,\r\n                    error: null,\r\n                });\r\n            }).catch(error => {\r\n                this.setState({ error: \"Error : Invalid City\" })\r\n            });\r\n    }\r\n\r\n    getDeviceLocation = () => {\r\n        if (navigator.geolocation) {\r\n            console.log(\"Location is enabled\");\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.getCoordsForecast(position.coords.latitude, position.coords.longitude);\r\n                this.setState({ location: position });\r\n            });\r\n        } else {\r\n            console.log(\"Location is not enabled by the browser\");\r\n        }\r\n\r\n    }\r\n    setLocation = (position) => {\r\n        this.setState({ location: position });\r\n        this.getCoordsForecast(position.coords.latitude, position.coords.longitude);\r\n    }\r\n\r\n    getCoordsForecast = (latitude, longitude) => {\r\n        axios.get('http://api.openweathermap.org/data/2.5/weather?lat=' + Number.parseFloat(latitude).toFixed(4) + '&lon=' + Number.parseFloat(longitude).toFixed(4) + '&units=' + UNIT + '&appid=' + API_KEY)\r\n            .then(response => {\r\n                this.setState({\r\n                    currentWeather: response.data,\r\n                    error: null,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n\r\n        axios.get('http://api.openweathermap.org/data/2.5/forecast?lat=' + Number.parseFloat(latitude).toFixed(4) + '&lon=' + Number.parseFloat(longitude).toFixed(4) + '&units=' + UNIT + '&appid=' + API_KEY)\r\n            .then(response => {\r\n               \r\n                this.setState({\r\n                    forecast: response.data,\r\n                    error: null,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    handleCitySearch = (event, city) => {\r\n        event.preventDefault();\r\n        if (city !== null || city !== '') {\r\n            this.getForecastFromCity(city);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MainContent\">\r\n                <nav className=\"navbar navbar-dark bg-dark\">\r\n                    <span className=\"navbar-brand mb-0 h1\">My Weather App</span>\r\n                </nav>\r\n\r\n                <div className=\"container\">\r\n                    <Location error={this.state.error} clicked={(event, city) => this.handleCitySearch(event, city)} location={this.state.location ? this.state.location.coords.latitude : null} />\r\n                    <Forecast forecast={this.state.forecast ? this.state.forecast : null} />\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst API_KEY = 'e24583b28fe817e6449c9172cf4a6de6';\r\nconst UNIT = 'metric';\r\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Weather from './containers/weather/weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n      </header>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}